{"version":3,"sources":["config/_license.config.scss","config/_reset.config.scss","../node_modules/accoutrement-color/sass/_color.scss","assert.scss","../node_modules/accoutrement-scale/sass/_units.scss","config/_scale.config.scss"],"names":[],"mappings":"AAEA;;;;;;;;;;;;;;;;;;;;;;GAsBG;ACFH;EACE,YC8Ec,ED/EH;AAAb;EACE,YC8Ec,ED/EH;;AEZb;EACE,oBC6D8B,ED9D1B;;AAIN;EACE,0BEgBY;EFfZ,0BAAyB,EAFxB;EAIA;IACC,WAAW,EADC","file":"assert.css","sourcesContent":["// scss-lint:disable all\n\n/*!\n * Web Fonts from fontspring.com\n *\n * All OpenType features and all extended glyphs have been removed.\n * Fully installable fonts can be purchased at http://www.fontspring.com\n *\n * The fonts included in this stylesheet are subject to the End User License you purchased\n * from Fontspring. The fonts are protected under domestic and international trademark and\n * copyright law. You are prohibited from modifying, reverse engineering, duplicating, or\n * distributing this font software.\n *\n * (c) 2010-2015 Fontspring\n *\n *\n *\n *\n * The fonts included are copyrighted by the vendor listed below.\n *\n * Vendor:      FontSite Inc.\n * License URL: http://www.fontspring.com/licenses/fontsite/webfont\n *\n *\n */\n","// Sanitize Settings\n// =================\n// https://github.com/10up/sanitize.css\n\n\n$root-font-family: 'CenturyOldStyle', $serif-stack;\n$root-font-size: percentage($base-size / $_browser-default-font-size);\n$root-line-height: size('rhythm', em);\n$root-text-rendering: auto;\n\n$monospace-font-family: $mono-stack;\n\n$html-background-color: color('background');\n$html-color: color('text');\n\n$selection-background-color: color('action');\n$selection-color: contrast('action');\n\n$small-font-size: size('small');\n\n\n// @@@ temporary\n::selection {\n  color: $selection-color;\n}\n","// Color Toolkit\n// =============\n\n\n$colors: (\n  dark: #000,\n  light: #fff,\n\n  contrast-dark: dark,\n  contrast-light: light,\n) !default;\n\n\n// Colors\n// ------\n@mixin colors(\n  $map\n) {\n  $colors: map-merge($colors, $map) !global;\n}\n\n\n// Color\n// -----\n@function color($color) {\n  // Parse arguments\n  $color: map-get($colors, $color) or $color;\n  $base: nth($color, 1);\n  $adjust: if(length($color) > 1, nth($color, 2), ());\n\n  // Recursive check\n  $color: if(map-has-key($colors, $base), color($base), $base);\n\n  // Adjustments\n  @each $function, $value in $adjust {\n    @if function-exists($function) {\n      $color: call($function, $color, $value);\n    } @else {\n      @warn \"#{$function} is not a valid color function.\";\n    }\n  }\n\n  @return $color;\n}\n\n\n// Tint\n// ----\n@function tint(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#fff, $color, $percentage);\n}\n\n\n// Shade\n// -----\n@function shade(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#000, $color, $percentage);\n}\n\n\n// Brightness\n// ----------\n@function brightness(\n  $color\n) {\n  $color: color($color);\n\n  $_red: red($color) * .299;\n  $_green: green($color) * .587;\n  $_blue: blue($color) * .114;\n\n  @return ($_red + $_green + $_blue) / 255 * 100%;\n}\n\n\n// Contrast\n// --------\n@function contrast(\n  $color,\n  $dark: contrast-dark,\n  $light: contrast-light\n) {\n  $color: color($color);\n  $dark: color($dark);\n  $light: color($light);\n\n  @if not(type-of($dark) == color) {\n    $dark: #000;\n  }\n\n  @if not(type-of($light) == color) {\n    $light: #fff;\n  }\n\n  $_color-brightness: brightness($color);\n  $_dark-text-brightness: brightness($dark);\n  $_light-text-brightness: brightness($light);\n\n  $_light-contrast: abs($_color-brightness - $_light-text-brightness);\n  $_dark-contrast: abs($_color-brightness - $_dark-text-brightness);\n\n  @return if($_light-contrast > $_dark-contrast, $light, $dark);\n}\n\n\n// Contrasted\n// ----------\n@mixin contrasted(\n  $background,\n  $dark: contrast-dark,\n  $light: contrast-light\n) {\n  $background: color($background);\n\n  background-color: $background;\n  color: contrast($background, $dark, $light);\n}\n","// Assert!\n// =======\n\n\n@import 'config/manifest';\n\n\n// Assertions\n// ----------\n\nbody {\n  padding: size('rhythm');\n}\n\np {\n  margin-bottom: size('shim');\n  transition: opacity 300ms;\n\n  &:last-child {\n    opacity: 0;\n  }\n}\n","// Unit Helpers\n// ------------\n\n@import 'scale.config';\n\n\n// Convert Length\n// --------------\n@function convert-length(\n  $length,\n  $to-unit,\n  $from-context: $base-size,\n  $to-context: $from-context\n) {\n  $from-unit: unit($length);\n\n  // Optimize for cases where `from` and `to` units are accidentally the same.\n  @if $from-unit == $to-unit {\n    @return $length;\n  }\n\n\n  // Context values must be in px\n  @if unit($from-context) != 'px' {\n    @warn 'Paremeter $from-context must resolve to a value in pixel units.';\n  }\n\n  @if unit($to-context) != 'px' {\n    @warn 'Parameter $to-context must resolve to a value in pixel units.';\n  }\n\n\n  // Convert input length to pixels\n  $px-length: $length;\n\n  @if $from-unit != 'px' {\n\n    // Convert relative units using the from-context parameter.\n    @if $from-unit == 'em' {\n      $px-length: $length * $from-context / 1em;\n    } @else if $from-unit == 'rem' {\n      $px-length: $length * $base-size / 1rem;\n    } @else if $from-unit == '%' {\n      $px-length: $length * $from-context / 100%;\n    } @else if $from-unit == 'ex'  {\n      $px-length: $length * $from-context / 2ex;\n    }\n\n    // Convert absolute units using Sass' conversion table.\n    @else if index('in' 'mm' 'cm' 'pt' 'pc', $from-unit) {\n      $px-length: 0px + $length;\n    }\n\n    // Certain units can't be converted.\n    @else if index('ch' 'vw' 'vh' 'vmin', $from-unit) {\n      @warn \"#{$from-unit} units can't be reliably converted; Returning original value.\";\n      @return $length;\n    } @else {\n      @warn \"#{$from-unit} is an unknown length unit. Returning original value.\";\n      @return $length;\n    }\n  }\n\n  // Convert length in pixels to the output unit\n  $output-length: $px-length;\n\n  @if $to-unit != 'px' {\n\n    // Relative units\n    @if $to-unit == 'em' {\n      $output-length: $px-length * 1em / $to-context;\n    } @else if $to-unit == 'rem' {\n      $output-length: $px-length * 1rem / $base-size;\n    } @else if $to-unit == '%' {\n      $output-length: $px-length * 100% / $to-context;\n    } @else if $to-unit == 'ex' {\n      $output-length: $px-length * 2ex / $to-context;\n    }\n\n    // Absolute units\n    @else if $to-unit == 'in' {\n      $output-length: 0in + $px-length;\n    } @else if $to-unit == 'mm' {\n      $output-length: 0mm + $px-length;\n    } @else if $to-unit == 'cm' {\n      $output-length: 0cm + $px-length;\n    } @else if $to-unit == 'pt' {\n      $output-length: 0pt + $px-length;\n    } @else if $to-unit == 'pc' {\n      $output-length: 0pc + $px-length;\n    }\n\n    // Non-convertible units\n    @else if index('ch' 'vw' 'vh' 'vmin', $to-unit) {\n      @warn \"#{$to-unit} units can't be reliably converted; Returning original value.\";\n      @return $length;\n    } @else {\n      @warn \"#{$to-unit} is an unknown length unit. Returning original value.\";\n      @return $length;\n    }\n  }\n\n  @return $output-length;\n}\n","// Scale\n// =====\n\n@import '../../node_modules/accoutrement-scale/sass/scale';\n\n\n$base-size: 22px;\n$ratio: 'minor-third';\n\n$sizes: (\n  'normal': $base-size,\n  'rhythm': 2,\n\n  'h1': 3,\n  'h2': 2,\n  'h3': 1,\n\n  'small': -1,\n  'smaller': -2,\n\n  'page-count': 6,\n  'page-active': 10,\n\n  'gutter': 'rhythm',\n  'spacer': 6,\n  'page': 30rem,\n\n  'corners': 3px,\n);\n\n$meta-sizes: (\n  'shim': size('gutter')/2,\n  'half-shim': size('gutter')/4,\n);\n\n$sizes: map-merge($sizes, $meta-sizes);\n"],"sourceRoot":"/source/"}